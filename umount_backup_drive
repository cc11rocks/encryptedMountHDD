#!/bin/bash
#This script was created by Clayton Casciato. This requires bash 3.0.0+. With modification, this script can be used in previous versions. This is licenced under the "Modified BSD license"

designated_location="/mnt/backup"; #Full path to mount point
designated_crypt="backup"; #/dev/mapper/$designated_crypt

function df_exit {
  echo "***df -h***"
  df -h;
  exit;
}

function unmap_backup {
  echo "***sudo cryptsetup close $designated_crypt***"
  sudo cryptsetup close $designated_crypt
  status=$?
  #echo "status >> $status" #Debugging purposes
  if [ $status -eq 0 ];
    then
    echo "***Done.***";
  else
    echo "***Unsucessful cryptsetup close***"
    echo "***df -h***"
    df -h
    echo "***fdisk-l***"
    fdisk-l
  fi
  df_exit;
}

function unmount_backup {
  echo "***df -h***"
  status=$( df -h );
  echo "***Unmounting $designated_location***"
  sudo umount $designated_location
  status=$?

  #echo "status >> $status" #Debugging purposes
  if [ $status -eq 0 ];
    then
    echo "***Successful umount***";
    unmap_backup;
    else
      echo "***Unsucessful umount***";
      df_exit;
  fi
}

echo "***Checking status of '$designated_crypt'***";
status=$( sudo cryptsetup status $designated_crypt );
if [[ $status != *"$designated_crypt is active"* ]]; #Does $status contain "$designated_crypt is active"?
  then
  echo "***The encrypted drive is not in use or active***"; #/dev/mapper/$designated_crypt && $designated_location shouldn't exist
  df_exit;
  elif [[ $status == *"$designated_crypt is active and is in use"* ]]; #/dev/mapper/$designated_crypt && $designated_location both exist
    then
    unmount_backup;
  else #/dev/mapper/$designated_crypt only; device probably isn't mounted
    unmap_backup;
fi
